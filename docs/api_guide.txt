KINGSWAY SCHOOL MANAGEMENT SYSTEM - DEVELOPER GUIDE
==============================================

This guide provides detailed information about the modernized API architecture, implementation details, and how to interact with the system as of 2024.

1. ARCHITECTURE OVERVIEW
-----------------------
The system is fully API-driven and modular, with:
- All frontend data flows through a centralized `api.js` file
- Unified notification modal (Bootstrap-based, color-coded)
- Real-time data reloads (every 30 seconds)
- Dummy data fallback on the frontend if backend returns no data
- JWT authentication for all endpoints (except login/register/reset)
- RESTful, versioned endpoints for all modules

2. AUTHENTICATION
----------------
- JWT (JSON Web Tokens) for all protected endpoints
- Obtain token via:
POST /api/auth.php?action=login
{
    "username": "your_username",
    "password": "your_password"
}
Response:
{
    "status": "success",
        "token": "your_jwt_token",
    "user": { ... }
}
- Use header: Authorization: Bearer <jwt_token>

3. API ENDPOINTS AND METHODS
---------------------------
All endpoints follow RESTful conventions and are accessed via `/api/{module}.php` with an `action` parameter. Example: `/api/students.php?action=list`

Common Query Parameters:
- page: Page number for pagination
- limit: Items per page
- search: Search term
- sort: Sort field
- order: Sort order (ASC/DESC)

4. RESPONSE FORMAT
-----------------
All API responses follow a standard format:
{
    "status": "success|error",
    "data": { ... },
    "message": "Optional message"
}

5. MODULE-SPECIFIC ENDPOINTS
---------------------------

USERS MODULE:
------------
GET    /api/users.php?action=list
GET    /api/users.php?action=view&id={id}
POST   /api/users.php?action=add
POST   /api/users.php?action=update&id={id}
POST   /api/users.php?action=delete&id={id}
POST   /api/users.php?action=change-password&id={id}
POST   /api/users.php?action=reset-password
GET    /api/users.php?action=roles
GET    /api/users.php?action=permissions
POST   /api/users.php?action=assign-role&id={id}
POST   /api/users.php?action=assign-permission&id={id}

STUDENTS MODULE:
--------------
GET    /api/students.php?action=list
GET    /api/students.php?action=view&id={id}
POST   /api/students.php?action=add
POST   /api/students.php?action=update&id={id}
POST   /api/students.php?action=delete&id={id}
GET    /api/students.php?action=qr&id={id}
GET    /api/students.php?action=attendance&id={id}
GET    /api/students.php?action=performance&id={id}
GET    /api/students.php?action=fees&id={id}
POST   /api/students.php?action=promote&id={id}
POST   /api/students.php?action=transfer&id={id}

STAFF MODULE:
------------
GET    /api/staff.php?action=list
GET    /api/staff.php?action=view&id={id}
POST   /api/staff.php?action=add
POST   /api/staff.php?action=update&id={id}
POST   /api/staff.php?action=delete&id={id}
GET    /api/staff.php?action=schedule&id={id}
GET    /api/staff.php?action=attendance&id={id}
GET    /api/staff.php?action=leaves&id={id}
POST   /api/staff.php?action=leave-request&id={id}

ACADEMIC MODULE:
---------------
GET    /api/academic.php?action=list
GET    /api/academic.php?action=view&id={id}
POST   /api/academic.php?action=add
POST   /api/academic.php?action=update&id={id}
POST   /api/academic.php?action=delete&id={id}
GET    /api/academic.php?action=lesson-plans
GET    /api/academic.php?action=curriculum-units
GET    /api/academic.php?action=academic-terms
GET    /api/academic.php?action=schemes-of-work
GET    /api/academic.php?action=lesson-observations

FINANCE MODULE:
--------------
GET    /api/finance.php?action=list
GET    /api/finance.php?action=view&id={id}
POST   /api/finance.php?action=add
POST   /api/finance.php?action=update&id={id}
POST   /api/finance.php?action=delete&id={id}
GET    /api/finance.php?id={id}&action=balance
GET    /api/finance.php?id={id}&action=statement
GET    /api/finance.php?id={id}&action=receipt
GET    /api/finance.php?id={id}&action=payslip
GET    /api/finance.php?id={id}&action=report
POST   /api/finance.php?id={id}&action=allocate
POST   /api/finance.php?id={id}&action=refund
POST   /api/finance.php?id={id}&action=approve

INVENTORY MODULE:
----------------
GET    /api/inventory.php?action=list
GET    /api/inventory.php?action=view&id={id}
POST   /api/inventory.php?action=add
POST   /api/inventory.php?action=update&id={id}
POST   /api/inventory.php?action=delete&id={id}
POST   /api/inventory.php?action=transaction
GET    /api/inventory.php?action=low-stock
GET    /api/inventory.php?action=valuation

TRANSPORT MODULE:
----------------
GET    /api/transport.php?action=list
GET    /api/transport.php?action=view&id={id}
GET    /api/transport.php?action=routes
GET    /api/transport.php?action=vehicles
GET    /api/transport.php?action=drivers
POST   /api/transport.php?action=add
POST   /api/transport.php?action=update&id={id}
POST   /api/transport.php?action=delete&id={id}
GET    /api/transport.php?id={id}&action=schedule
GET    /api/transport.php?id={id}&action=maintenance
GET    /api/transport.php?id={id}&action=attendance
GET    /api/transport.php?id={id}&action=students
POST   /api/transport.php?id={id}&action=schedule
POST   /api/transport.php?id={id}&action=maintenance
POST   /api/transport.php?id={id}&action=attendance

ACTIVITIES MODULE:
-----------------
GET    /api/activities.php?action=list
GET    /api/activities.php?action=view&id={id}
POST   /api/activities.php?action=add
POST   /api/activities.php?action=update&id={id}
POST   /api/activities.php?action=delete&id={id}
POST   /api/activities.php?action=register-participant
POST   /api/activities.php?action=update-participant-status&id={id}
GET    /api/activities.php?action=upcoming
GET    /api/activities.php?action=student-activities&student_id={id}

ATTENDANCE MODULE:
-----------------
GET    /api/attendance.php?action=list
GET    /api/attendance.php?action=view&id={id}
POST   /api/attendance.php?action=mark
POST   /api/attendance.php?action=bulk-mark

SCHEDULES MODULE:
----------------
GET    /api/schedules.php?action=list
GET    /api/schedules.php?action=view&id={id}
POST   /api/schedules.php?action=add
POST   /api/schedules.php?action=update&id={id}
POST   /api/schedules.php?action=delete&id={id}
GET    /api/schedules.php?action=timetable
GET    /api/schedules.php?action=exam-schedule
GET    /api/schedules.php?action=events
GET    /api/schedules.php?action=activity-schedule
GET    /api/schedules.php?action=rooms
GET    /api/schedules.php?action=scheduled-reports
GET    /api/schedules.php?action=route-schedule

COMMUNICATIONS MODULE:
---------------------
GET    /api/communications.php?action=list
GET    /api/communications.php?action=view&id={id}
POST   /api/communications.php?action=send
POST   /api/communications.php?action=send-bulk
GET    /api/communications.php?action=templates&type={type}
POST   /api/communications.php?action=create-template
GET    /api/communications.php?action=sms-templates
GET    /api/communications.php?action=email-templates
POST   /api/communications.php?action=create-sms-template
POST   /api/communications.php?action=create-email-template
GET    /api/communications.php?action=sms-config
POST   /api/communications.php?action=update-sms-config
GET    /api/communications.php?action=groups
POST   /api/communications.php?action=create-group

REPORTS MODULE:
--------------
GET    /api/reports.php?action=list
GET    /api/reports.php?action=view&id={id}
POST   /api/reports.php?action=generate
GET    /api/reports.php?action=download&id={id}&format=pdf|excel
GET    /api/reports.php?action=export&type={type}&format=excel

6. INTEGRATION EXAMPLES
----------------------

FRONTEND (JavaScript/Fetch):
// All requests should go through api.js, which handles token, notifications, and dummy data fallback.

// Example: List students
StudentsAPI.list().then(data => {
    // Use data.students
});

// Example: Add student
handleFormSubmit('#studentForm', (data, files) => StudentsAPI.create(data, files), (result) => {
    showNotification('Student added successfully!', 'success');
});

// All notifications use showNotification(message, type)
// Data auto-reloads every 30 seconds

7. ERROR HANDLING
----------------
- All errors are returned with appropriate HTTP status codes and messages
- The frontend shows errors in the notification modal

8. SECURITY CONSIDERATIONS
-------------------------
- Always use HTTPS in production
- Validate all input data
- Use prepared statements for database queries
- Keep tokens secure
- Implement rate limiting
- Follow CORS policies
- Implement proper error logging
- Regular security audits

9. BEST PRACTICES
----------------
- Use appropriate HTTP methods
- Include proper headers
- Handle errors gracefully
- Implement proper validation
- Follow API versioning
- Document all changes
- Use dummy data fallback on the frontend if backend returns no data
- Use the notification modal for all user feedback
- Auto-reload data for real-time updates

10. DEVELOPMENT WORKFLOW
-----------------------
1. Set up local development environment
2. Use version control (Git)
3. Follow coding standards
4. Write unit tests
5. Document changes
6. Review code
7. Test in staging
8. Deploy to production

11. TROUBLESHOOTING
------------------
Common Issues:
1. Authentication failures
   - Check token validity
   - Verify credentials
   - Check token expiration

2. Permission errors
   - Verify user roles
   - Check required permissions
   - Review access control settings

3. Data validation errors
   - Check input format
   - Verify required fields
   - Review data types

4. Performance issues
   - Monitor query performance
   - Check server resources
   - Review caching implementation

12. MONITORING AND LOGGING
-------------------------
The system implements comprehensive logging:
- Access logs
- Error logs
- Activity logs
- Performance metrics
- Security events

13. MAINTENANCE AND UPDATES
--------------------------
Regular maintenance tasks:
1. Database optimization
2. Log rotation
3. Security updates
4. Performance monitoring
5. Backup verification
6. Code updates
7. Documentation updates

For additional support or questions, contact the development team or create an issue in the repository. 